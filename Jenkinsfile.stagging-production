pipeline {
    agent any
    parameters{
        choice(name: 
        'ENVIRONMENT', 
        choices: ['staging', 'production', 'cleanup-for-dev', 'cleanup-for-prod'], 
        description: 'Select the deployment environment')
    }



    environment {
        AWS_REGION = 'us-east-1'
        backend_docker_image = 'node-app'
        frontend_docker_image = 'react-app'
        docker_username = 'kartik2311'
    }

    stages {

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('SonarQube Code Analysis') {
            when {
                // branch 'master'
                expression { return params.ENVIRONMENT == 'staging' || params.ENVIRONMENT == 'production' }
            }
            steps {
             script {
               def scannerHome = tool 'lil-sonarqube'
               withSonarQubeEnv('sonarqube') {
                  sh """
                    ${scannerHome}/bin/sonar-scanner \
                    -Dsonar.projectKey=NodeJS-project \
                    -Dsonar.sources=. \
                    -Dsonar.host.url=$SONAR_HOST_URL \
                    -Dsonar.login=$SONAR_AUTH_TOKEN
                    """
                     }  
                }  

            }       
               


        }


           

         
        stage('SonarQube Quality Gate') {
            when {
                // branch 'master'
                expression { return params.ENVIRONMENT == 'staging' || params.ENVIRONMENT == 'production' }
            }
            steps {
                script{

                     echo "Skipping quality gate wait to avoid blocking pipeline"
                    // def qualityGate = waitForQualityGate()
                    // if (qualityGate.status != 'OK') {
                    //     error "Pipeline aborted due to quality gate failure: ${qualityGate.status}"
                    // } else {
                    //     echo "Quality gate passed: ${qualityGate.status}"
                    // }    
                }
            }
        }
        // stage("Install Dependencies") {
        //     when {
        //         // branch 'master'
        //         expression { return params.ENVIRONMENT == 'staging' || params.ENVIRONMENT == 'production' }
        //     }
        //     steps {
        //         sh '''
        //             echo "Installing backend dependencies"
        //             cd backend
        //             npm install

        //             echo "Installing frontend dependencies"
        //             cd ../frontend
        //             npm install
        //         '''
        //     }
        // }

        // stage("OWASP Dependency Check") {
        //     when {
        //         // branch 'master'
        //         expression { return params.ENVIRONMENT == 'staging' || params.ENVIRONMENT == 'production' }
        //     }
        //     steps {
        //         script {
        //             echo "Running OWASP Dependency Check"
        //             sh '''
        //                 mkdir -p owasp-reports
        //                 docker run --rm  -v $(pwd):/src -v $(pwd)/owasp-reports:/report owasp/dependency-check \
        //                 --project "NodeJS Project" \
        //                 --scan /src \
        //                 --format "ALL" \
        //                 --out /report \
        //                 --nvdApiKey aceb4a41-5ab7-4e5b-bda8-bd8f2f52ba24
        //             '''
        //             archiveArtifacts artifacts: 'owasp-reports/*', allowEmptyArchive: true
        //         }
        //     }
        // }
        

        stage('Docker Login, Build, Tag and Push') {
            
            when {

                // branch 'master'
                
            
                expression { return params.ENVIRONMENT == 'staging'|| params.ENVIRONMENT == 'production' }
                
                
                
            }
            steps {
                withCredentials([
                    usernamePassword(
                        credentialsId: 'dockerhub',
                        usernameVariable: 'docker_username',
                        passwordVariable: 'docker_password'
                    ),
                    [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS-KEYS']
                ]) {
                    sh '''
                        echo $docker_password | docker login -u $docker_username --password-stdin
                        echo "Run docker build for backend"
                        cd backend
                        docker build -t $backend_docker_image:git-${GIT_COMMIT} .
                        docker tag $backend_docker_image:git-${GIT_COMMIT} $docker_username/$backend_docker_image:git-${GIT_COMMIT}
                        docker push $docker_username/$backend_docker_image:git-${GIT_COMMIT}


                        cd ../frontend
                        echo "Run docker build for frontend"
                        docker build -t $frontend_docker_image:git-${GIT_COMMIT} .
                        docker tag $frontend_docker_image:git-${GIT_COMMIT} $docker_username/$frontend_docker_image:git-${GIT_COMMIT}
                        docker push $docker_username/$frontend_docker_image:git-${GIT_COMMIT}
                    '''
                }
            }
        }
        stage("Trviy-scan"){
            when{
                // branch 'master'
                expression {return params.ENVIRONMENT == 'staging'}
            }
            steps{
                sh '''
                   mkdir -p trivy-reports
                   echo "Running Trivy Scan for backend"
                   docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v \
                   $(pwd)/trivy-reports:/trivy-reports aquasec/trivy image --format json -o /trivy-reports/backend-trivy-report.json $docker_username/$backend_docker_image:git-${GIT_COMMIT}
                   
                   echo "Running Trivy Scan for frontend"   
                   docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v  $(pwd)/trivy-reports:/trivy-reports aquasec/trivy image --format json -o /trivy-reports/frontend-trivy-report.json $docker_username/$frontend_docker_image:git-${GIT_COMMIT}
                 '''
                 sh ''' 
                    docker run --rm -v $(pwd)/trivy-reports:/reports aquasec/trivy convert \
                    --format template --template "@contrib/html.tpl" /reports/backend-trivy.json > /reports/backend-trivy.html

                    docker run --rm -v $(pwd)/trivy-reports:/reports aquasec/trivy convert \
                    --format template --template "@contrib/html.tpl" /reports/frontend-trivy.json > /reports/frontend-trivy.html
                  '''
                    archiveArtifacts artifacts: 'trivy-reports/*', allowEmptyArchive: true 




                
            }
        }


        stage('Test') {
            when {
                // branch 'master'
                expression { return params.ENVIRONMENT == 'staging' }
            }
            steps {
                sh '''
                    echo "Running tests for frontend"
                    docker rm -f react-test-container || true
                    docker run -d -p 3000:80 --name react-test-container $docker_username/react-app:git-${GIT_COMMIT}
                    sleep 10
                    curl -f http://localhost:3000 || exit 1
                    sleep 5
                    echo "Frontend tests passed successfully"
                    docker stop react-test-container || true
                    docker rm -f react-test-container || true

                    docker rm -f node-test-container || true
                    echo "Backend test stage"
                    docker run -d -p 5002:5002 --name node-test-container $docker_username/node-app:git-${GIT_COMMIT}
                    sleep 10
                    curl -f http://localhost:5002/api/message || exit 1
                    curl -f http://localhost:5002/api/info || exit 1
                    sleep 5
                    echo "Tests passed successfully"
                    docker stop node-test-container
                    docker rm node-test-container
                '''
            }
        }

        stage('Deploy to dev') {
            
            when {
                // branch 'master'
                
                    expression { return params.ENVIRONMENT == 'staging' }
                   
                
                
            }
            steps {
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS-KEYS']
                ]) {
                    script {
                        sh """
                            echo "Deploying to AWS EC2 staging instance via SSM"
                            aws configure set region $AWS_REGION
                            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY

                            aws ssm send-command \
                                --instance-ids "i-09799960043d07646" \
                                --document-name "AWS-RunShellScript" \
                                --comment "Jenkins deployment" \
                                --cloud-watch-output-config '{"CloudWatchLogGroupName":"stagging-logs","CloudWatchOutputEnabled":true}' \
                                --parameters 'commands=[
                                    "sudo yum update -y",
                                    "sudo dnf install docker -y",
                                    "sudo systemctl start docker",
                                    "sudo systemctl enable docker",
                                    "sudo chmod 777 /var/run/docker.sock",
                                    


                                    "echo frontend deployment started",
                                    "docker pull $docker_username/$frontend_docker_image:git-${GIT_COMMIT}",
                                    "docker rm -f react-frontend-container || true",
                                    "docker run -d -p 3000:80 --name react-frontend-container ${docker_username}/${frontend_docker_image}:git-${GIT_COMMIT}",

                                    "echo backend deployment started",
                                    "docker rm -f node-backend-container || true",
                                    "docker pull $docker_username/$backend_docker_image:git-${GIT_COMMIT}",
                                    "docker run -d -p 5002:5002 --name node-backend-container ${docker_username}/${backend_docker_image}:git-${GIT_COMMIT}"
                                ]'
                            echo "Deployment completed"
                        """
                    }
                }
            }
        }

        stage('deploy to production') {
            when {
                // branch 'production'
                expression { return params.ENVIRONMENT == 'production' }
            }
            steps {
                echo 'Deploy to production stage - Manual Approval Required'
                input message: 'Approve deployment to production?', ok: 'Deploy'
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS-KEYS']
                ]) {
                    script {
                        sh """
                            echo "Deploying to AWS EC2 production instance via SSM"
                            aws configure set region $AWS_REGION
                            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY  


                            aws ssm send-command \
                                --instance-ids "i-097759ec4fc7436a7" \
                                --document-name "AWS-RunShellScript" \
                                --comment "Jenkins deployment to production" \
                                --cloud-watch-output-config '{"CloudWatchLogGroupName":"jenkins-production-logs","CloudWatchOutputEnabled":true}' \
                                --parameters 'commands=[
                                    "sudo yum update -y",
                                    "sudo dnf install docker -y",
                                    "sudo systemctl start docker",
                                    "sudo systemctl enable docker",
                                    "sudo chmod 777 /var/run/docker.sock",

                                    echo "cloning repo-for docker-compose",
                                    git clone 

                                    "echo frontend deployment started",
                                    "docker pull $docker_username/$frontend_docker_image:git-${GIT_COMMIT}",
                                    "docker rm -f react-frontend-container || true",
                                    "docker run -d -p 3000:80 --name react-frontend-container ${docker_username}/${frontend_docker_image}:git-${GIT_COMMIT}",   

                                    "echo backend deployment started",
                                    "docker rm -f node-backend-container || true",
                                    "docker pull $docker_username/$backend_docker_image:git-${GIT_COMMIT}",
                                    "docker run -d -p 5002:5002 --name node-backend-container ${docker_username}/${backend_docker_image}:git-${GIT_COMMIT}"
                                ]'
                            echo "Deployment to production completed"
                        """

                        
                    }
                }
        
            }
        }                 



    
        stage('Cleanupfordev') {
            when{
                // branch 'master'
            
                expression { return params.ENVIRONMENT == 'cleanup-for-dev' }
            }
            steps {
               withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS-KEYS']
                ]){
                    script{
                        sh '''
                          echo "Cleaning up dev_env Docker images"
                          aws configure set region $AWS_REGION
                          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY  

                          aws ssm send-command \
                           --instance-ids "i-09799960043d07646" \
                           --document-name "AWS-RunShellScript" \
                           --cloud-watch-output-config '{"CloudWatchLogGroupName":"jenkins-stagging-cleaup-logs","CloudWatchOutputEnabled":true}' \
                           --comment "Jenkins cleanup command" \
                           --parameters 'commands=[
                                "docker rm -f react-frontend-container || true",
                                "docker rm -f node-backend-container || true",
                                "docker rmi -f \$(docker images -q) || true",
                                
                             
                         ]' \
                         --query "Command.CommandId" --output text

                
                        '''
                    }
                }
            }
        }
        stage('Cleanupforprod') {
            when{
                // branch 'production'
                expression { return params.ENVIRONMENT == 'cleanup-for-prod' }
            }
            steps {
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS-KEYS']
                ]){
                    script{
                        sh """
                          echo "Cleaning up production_env Docker images"
                          aws configure set region $AWS_REGION
                          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY  

                          aws ssm send-command \
                            --instance-ids "i-097759ec4fc7436a7" \
                            --document-name "AWS-RunShellScript" \
                            --cloud-watch-output-config '{"CloudWatchLogGroupName":"jenkins-production-cleanup-logs","CloudWatchOutputEnabled":true}' \
                            --comment "Jenkins cleanup command" \
                            --parameters 'commands=[
                              "docker rm -f react-frontend-container || true",
                              "docker rm -f node-backend-container || true",
                              "docker rmi -f \$(docker images -q) || true",
                              #docker rmi -f $docker_username/${frontend_docker_image} || true,
                              #docker rmi -f $docker_username/${backend_docker_image} || true,
                              #docker rmi -f ${frontend_docker_image} || true,
                              #docker rmi -f ${backend_docker_image}  || true
                             ]' \
                             --query "Command.CommandId" --output text

                
                             """
                    }
                }
            }
        }
    }
}